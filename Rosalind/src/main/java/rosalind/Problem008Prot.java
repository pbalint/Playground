package rosalind;

import java.util.HashMap;
import java.util.Map;

public class Problem008Prot {
	private static Map<String, String> PROTEIN_ENCODING_TABLE = new HashMap<>();

	static {
		PROTEIN_ENCODING_TABLE.put("UUU", "F");
		PROTEIN_ENCODING_TABLE.put("CUU", "L");
		PROTEIN_ENCODING_TABLE.put("AUU", "I");
		PROTEIN_ENCODING_TABLE.put("GUU", "V");
		PROTEIN_ENCODING_TABLE.put("UUC", "F");
		PROTEIN_ENCODING_TABLE.put("CUC", "L");
		PROTEIN_ENCODING_TABLE.put("AUC", "I");
		PROTEIN_ENCODING_TABLE.put("GUC", "V");
		PROTEIN_ENCODING_TABLE.put("UUA", "L");
		PROTEIN_ENCODING_TABLE.put("CUA", "L");
		PROTEIN_ENCODING_TABLE.put("AUA", "I");
		PROTEIN_ENCODING_TABLE.put("GUA", "V");
		PROTEIN_ENCODING_TABLE.put("UUG", "L");
		PROTEIN_ENCODING_TABLE.put("CUG", "L");
		PROTEIN_ENCODING_TABLE.put("AUG", "M");
		PROTEIN_ENCODING_TABLE.put("GUG", "V");
		PROTEIN_ENCODING_TABLE.put("UCU", "S");
		PROTEIN_ENCODING_TABLE.put("CCU", "P");
		PROTEIN_ENCODING_TABLE.put("ACU", "T");
		PROTEIN_ENCODING_TABLE.put("GCU", "A");
		PROTEIN_ENCODING_TABLE.put("UCC", "S");
		PROTEIN_ENCODING_TABLE.put("CCC", "P");
		PROTEIN_ENCODING_TABLE.put("ACC", "T");
		PROTEIN_ENCODING_TABLE.put("GCC", "A");
		PROTEIN_ENCODING_TABLE.put("UCA", "S");
		PROTEIN_ENCODING_TABLE.put("CCA", "P");
		PROTEIN_ENCODING_TABLE.put("ACA", "T");
		PROTEIN_ENCODING_TABLE.put("GCA", "A");
		PROTEIN_ENCODING_TABLE.put("UCG", "S");
		PROTEIN_ENCODING_TABLE.put("CCG", "P");
		PROTEIN_ENCODING_TABLE.put("ACG", "T");
		PROTEIN_ENCODING_TABLE.put("GCG", "A");
		PROTEIN_ENCODING_TABLE.put("UAU", "Y");
		PROTEIN_ENCODING_TABLE.put("CAU", "H");
		PROTEIN_ENCODING_TABLE.put("AAU", "N");
		PROTEIN_ENCODING_TABLE.put("GAU", "D");
		PROTEIN_ENCODING_TABLE.put("UAC", "Y");
		PROTEIN_ENCODING_TABLE.put("CAC", "H");
		PROTEIN_ENCODING_TABLE.put("AAC", "N");
		PROTEIN_ENCODING_TABLE.put("GAC", "D");
		PROTEIN_ENCODING_TABLE.put("UAA", "Stop");
		PROTEIN_ENCODING_TABLE.put("CAA", "Q");
		PROTEIN_ENCODING_TABLE.put("AAA", "K");
		PROTEIN_ENCODING_TABLE.put("GAA", "E");
		PROTEIN_ENCODING_TABLE.put("UAG", "Stop");
		PROTEIN_ENCODING_TABLE.put("CAG", "Q");
		PROTEIN_ENCODING_TABLE.put("AAG", "K");
		PROTEIN_ENCODING_TABLE.put("GAG", "E");
		PROTEIN_ENCODING_TABLE.put("UGU", "C");
		PROTEIN_ENCODING_TABLE.put("CGU", "R");
		PROTEIN_ENCODING_TABLE.put("AGU", "S");
		PROTEIN_ENCODING_TABLE.put("GGU", "G");
		PROTEIN_ENCODING_TABLE.put("UGC", "C");
		PROTEIN_ENCODING_TABLE.put("CGC", "R");
		PROTEIN_ENCODING_TABLE.put("AGC", "S");
		PROTEIN_ENCODING_TABLE.put("GGC", "G");
		PROTEIN_ENCODING_TABLE.put("UGA", "Stop");
		PROTEIN_ENCODING_TABLE.put("CGA", "R");
		PROTEIN_ENCODING_TABLE.put("AGA", "R");
		PROTEIN_ENCODING_TABLE.put("GGA", "G");
		PROTEIN_ENCODING_TABLE.put("UGG", "W");
		PROTEIN_ENCODING_TABLE.put("CGG", "R");
		PROTEIN_ENCODING_TABLE.put("AGG", "R");
		PROTEIN_ENCODING_TABLE.put("GGG", "G"); 
	}
	
	public static void main(String[] args)  {
		String input = "AUGCGAGAGGCACUUGCCAUCACCACCAAGGUCCAACCCACACAAUGUUGGGGCCCGACAGCGGGUAAGACAUAUAGCCAGAGUCUUCGCGCAACCAAAAAUUUCUACAAAUGUAACGUGCACUCAAGGAGUCUUGAUUAUGAUUUCACUAUGUCUUCCUUAAGUUUGGGAACACCUCCCAUCAGCUUAAAUGCGCCCAAGUGCCCUGUAGCUGCCCCAGUAGCAACAACUCGCCUGUGUUGUAGCUAUCAAUACCGAUUCAAAACUCUACCCCGGGCUCCCACGGCACUAUCUCCCUGCUCUUUUCGGUAUAAGCCGCACUGGGAGAUGCUCUUCCGAAGGUCGUGUUCGAAAGCCCUGUCUGGGGCGGACAUACUAAGCCAGCCCUUAGUGGUCGAACAUAGUACUUUGUUUGUCACAGCAUGGUUGGAUAGCCGGGACGCUUACCGGAGAAGCCGCGAACUCAGGCCGUUCACGGCAGGGAACUUAUACUGCGGAACCGUUCCUGUGACUAGCGUGAACUUGCUUGUUUUCAGCGAUUAUUCGAGGCAGAUAGGCACGCGCACGAUAAUUAUACGGCGGCAGGUCCAUCGGAGUCAUGGACUUUGGUCUGCCGCGCGAUCAUUGGAUGAAGAUAGGAAUUAUGACUAUAUAAGGCCACUGGCUAGGCGGCCCACGGCUGCCCUGGCUUCAGUAGAAGCGGCAGACCAACGCCACCCCAGAGCUUUCAACAUUGAUUAUAGAUACAUUAUCGUGAGCACCCACGACUUCUCAUCCGUAUUCCCCGGUGUGCAUCGGGUAGUGAUGUGGGGAACAAUACCUCAGAGGGGUAUCCUUGGAGUGGUCGGGAGGCGGGUACAACAAUAUCAAUACCUCGCAAAGACUCGUAGUAGGGGGAACACCACAGACCCUAUCUGCCCUCUAUCUCGCCAUUUCCUUGAUUAUCUCCUUGUAUCCACAUAUACGACGCUACAAGUCUAUUCAGAGGUAGGUUACCGCGGUGAGUUGCCAAGACAGUUCUCAGCUGUGCAGGAGGGAGCUCACCCAGAAUGGGUUAAAAUCAUGCGACAGCGCGGAGAUCGGGUCUUGCGAAAUAGUUUAACCCUCGGUCUUAUAUCCGUAGCGGUAGGCUAUGAACUCUUAACACCUCGUGCGCUGUGGUGGACCCUAGUUUCAGGGUGUAGCCGUGAUCUAAUAAUCGAAUUUGUUCUGGAUGUAGAGUCACAUUCCUCCAAGCAGAAGAUCACCCGAACCACAGCCCUCCAUUCCAGUAACCCCUGCACGUUAUGUACGUCUCUGCGUAUCCGGCGACCGGGUAUCUUUCUGAUAACGGCCCUCCAUGUAGAUUGGACUACGGUCCUGCGGGCAAAAUUUAUCUCGGUCAACCGCAAACCAGACAUAGAGGAGAUUCUUGCGUCCCUCUCAUUCCUCCAUUAUUACGCAGAGAAGCACCCCAUGAAUGCCGGAAUAAGGAGGACCUCCAUGAAGUCAAAGAAAUACGUGAGAUCCGAUGCGCUCCAUAGCAUUGGCUACCGGUUUUUUCAAAAUCUAAGCACUCGCUCAAAAAUACGCUUAAGGAUUGCCCCCGACCACAUUUUGAGGCAGCUUCUUGCGGUGAACUACACCGGUUCUGCUCCGUUUUACUCGUGUUGUCAUGAUGAAGGCCAGGCCUUAGGGUCACAGUCCGUUCGGGAUUGUCUUCCGCGAGCCUGCUGGGUGACCCUGCAGUUUCUGCCGUGCCCACUCGAACUCAGCGAACCUGCCUCCCUGGUUCGACCCUCUUCAGAAACACACGAAUACCCAAGUGACGACUCUAGGAAAUCACACUUGCCGAGAUUGUCCACCCUUGAUAUAGAGAAUUGUGUCAUAGGAGUAAGGUUGUGUAUAGGUCCAACAAGACCCUACCCGGCGGCAGGAGACAAAGCCCAUCGCGCCGCCGUCUUUUUUUCUGCGUCUCGUGAUACAAGGAUUACCGCACUUCGUAAGAACGACCAACCGCACACCUUUGUAUGGUUCUCUAACGACAUAUGUAUAUCCGGCACUUCAAACAAAAUUCUCCUAUACCCCCCAGUACUACGUCCAAAGCGCGAAGUCUUACGCAAGCACGGGGUUGCUGGAUCCCGGAUCUCUUACACAAUACGCCAAGGCCGCACUAGCUUUAUGAGCACAAAGGUACCUAAAAAAUACGACGUUUAUAUAGGGUCCCUGUUCGUUACCGGUCCAUCCCAAACGGCGAUAGGCAAACGUGGAGAUUUCUCUUACCCCCUAUCCCCCAAAAUAUCGUCCAAUCGGAAUUGUUCUGGCCUCCUUGGCGCGAAACACGUUCGAGGUACUGACUUUCUGGCUAGGAGUUUUGAUAUCAGAACGCAACCCAUGGGGUGUUCUCUGGCCAAUUAUUGCCCUGGCACAACACCGGUUUGCGAUCGAGGGACAGUAGAUCGCGGUGCUCCGCUUUUUAAUGAAGUGAGUGAUGUACUGGGUAUGGAAGGGCUUACUGCCGCCAGAUUAAUACAGCAUGAGCAAAACUUUCUAACACUCGACCUGAGCUCUGCCACGUCCUAUAACGUGCGAGCUAGUGGAGCGACUGCCGAGAUGCUUGUUGGUACUAUGGAAUCUAUGUCCGGUCAUCUUUGGCUCGAGGAAGUCAGGCGUCAGACUGAUAGCUGGGAUACGAGGCGCACAGAGUCUAUAGAACCCCGGAGCCGUUAUUUUAUAACAGUCGACCGCCACGCAAAUCUCCGGGAAGCGCGAGACUUGGUCCGCGAUGAGCGAUUAUUGCAUUCUAAGUCUUGUAUUCAUCCUUCUCAUGAUAUCUGGACCAUUAGCCAAAAAGGAUGGAGGGUGGGGGAUCACGAAUGGCUAUCUUCACCUGCCGUUCACUUGCUUGAAGGGAUCAGCCCGCGGCGUACACCUAGUCCAAGACUAAGCUCGAGCAUGAUUACAUUAGAUCUGCGAGCAACAUUCGAGUUACAAAUGGGUUGUAGGGGUGCAGCGAUUGGCUGGGGACAAUCGCGGGGGAGAUCUACCGCGCCGUCGGUUCACCUGAUUAAUGUUGCUACAUUCAUGAGUGUUGACUCAGCCUUGCCUCGUCAGAAAGGCCUCUGGAGGGUCUUCGUUAGAGGAAGUGUAACGUAUGCAAGCAACUCGUUUCUGACUAACCUGGAAAGCCUCCACACAAACUCCUCAUACCGUGUCACGAUUGCCGUGGUCAUGCGUGGUGCAUCCCAUUUUCGGAGUCUAUCUGACGUAUUUCGCAAUAACCCGAUCGCUUAUGGCAGGGUACUGUCCCACGAAGGCCCAGAAUCACUCGCAGCCUGGUGUGAUUUAAGUAUCGUAGGCGGGUACAGGAAAUUACGGGAAGCAUGUGUGUCCCGUUGGUUAGCGAGGCGAGUACACCCCUUAAAUAACUUCUGCGAUGCCGGACACUUCGUCUUCCACGUCGUUUCAACGUCGCGGCCACAAUCCAGGCAAAUGAAAAACCUAGGAGAGGUGCCAAAGGAGGCGGAGGACUGGCUUUUCUCGGAACGGUCAACGGGGAGCGCCCAAAAGGUCUGGGGAGACAGCGUGUACUCUGCUCCGAGGUCGGGCCCGACCAUAACAAUCUCACAUCCGUUUUGGGCGUUGUCGAGGGAGUAUCAUACACACACCGCAGACCGAGUGCGGCCCAAUUGCGGAGAAGAGGAGGCGCCGGCGCCAAUCCCCUCAGGGCUUCAGCUGGCGAGCGGAAUGGUAUCCGCUAGGCUUGAUUACAUCAAGCAAUGUGUUCCUCGCCUACGCUUUCGAAGACAGCACAGUCGCGUUGGCUGCCCCUCUGGAGGAAAAGCUGGCAACACACCUAAGUCAUCCAAGGGCACGAGAUCCAUUUCCCGGUCAAAGCCGGUAAUUGCACAAUGCAUUGUGUAUCUCUCGCUCUUACCUGCGGAACGACCUGAGGAGGAGGAGGACGUGGGUUCUUUUAUAUCGCCGUCCCAGUGCCUACUACCGAAGUUGAGAUGGCGGCUUGCGCCAUCCUUAAUGCACCGUCGACGGAUUAAGCUUACUAACCAAUCUGUAGAGUCACGCCAUCGAUAUAUUCAGGAGCAGAACCUCCCCCGUUUUAGAAAUUGCGCGCCUCCCGGCAUGGGCACGAACCCUGCAAUGAUAACUCUGCAUAGGAACUUGUUUCGCGCGCAGACCUCGGUCUCCCGAGGCAGGAGGGCUUGCGCCAAUAGUUUAUAUAGCUCGUACCCACCACAAGUAAGCCAAGUGGCAGCGGGUACCUCCAGUGGAUACAGGCACGCCCGCCCCCUUGUGGGUCACAUUUCCAAUUGGACCAUGUGGUGGGCACAGCCAAGUGUCGUACGUAAAGGCGAACAACAACACUGGAAGUGCUUUGGUCGCUUUUACUCAAACGCCUACUACACCCAUAAUCUCAGUCGGCUCCUAAAUUCUAGUAACGACCGUCCCAUAAAUGUCCUUGACGCCUUACGAACCCACCCUCGACACUAUGGAAUGUGCAAGGGAUUGCGUGCUGGAAAGCAGUCAUUUCGGAAAAGUCCUAGAGAAGGUGUACAGCGUACAGUAGAGUUGGCGCCAGGUGAGAAUAUAGUGGGAGUGCACAGGCACCUCAGCACAAUCUGGCCGCGGGAGAAAAUUAGUGAACCGUGCAGGGGGGUCAGCCCGAGGAUGUUGCACCUAUUGAGGAGGAGCUCAUAUCUCAGGCGAGUUCGGUCGCAGAGAGCCAGCUUUAACGCUCCCUGGGUCGCAGUAGAAGACCAACCAGUUUUGAUGUGGAACUUGUUCCCAUCUAUUAUCCAGUUUCGUAGAUACGGUUUCGGUUGCCCGUCUCUCUGGAAGCCACCCAAUUGCUGUCACAACUUCCGGCUUUCCUUCGAUCGCACCUGCUUGUACCUAUGGUACAGAGUUUGCCACAAAAAUCUGUGCGGUUUAGCAGUUCUUUGCAAGCUCAUGCCAGCGGCGACUUGUAAAUCGCUCAUCCCAUCCGGCCUCUUUACUUCCAACACUCAUCCCCAUGGGGCUGCUCGCUCGCUGAUCUUACUGAAUGUCGGUGUUUCAGCGAUCCGCGGCCCCCAGCUAAAUAAGGGCCAGGUUCUGCGCCACUGGUCAAUAAGCAUACUCCUGGAUUGGACUAUUAAGAGGUCGUCGCGAACUGCCUCACUACACGCACAUGCCCCACAGGGCCCCGUGUCCAUAUCUAAAAACGGAAGUGCGGGGGUCUAUGUUGGCAAACGCGAACCGAUCGAGUGGAUGCAAGCGUACCGCCGUAACCGUGUAGAAGUAUUCUUGCCGGUAUGUUUGUUAUGGCGCCUUCGUGUGUGCACAAAAGCUGACAGCAGGUCGGCACGAGAUUUAGUAGCAGAUUGGACUUGCAUCAGGACUCAGAGCAGCCCAACUCUACAUGUGCUAAAGACCCAAACUCAGGUCGCUAGCACGAGAGUAAUAAUGCCUCGAACUUAUCUGUCACUAGCGCCUGCAAACCUGAAGAUGCUAGGGCCAAGGCAGGGUAACUCUACCCAGCCAUUUGCAGGGUCUAAACGGCCGUCGCGCCGGGAUUUUUUAAUUCCUUUACCUAACUCCCGACAGAAGUAUCGAGACAUCCGGAAGUUUAUCGGUUGCCGUUUUACGGGCGUAACUCGAGACUGUCGCGUAGUCCCGGAGUCUAAGGUCACUCUGCAGCUCUGGGCGUCUGACUUGUCCUUGCGAACGGUGGCUGGUAUAUACGUGGGCCGUCGCCCGGUAAGUACUCCCGGAACGCUACCGCGAGUAAGUGCGAGCCGAAUUCAAGAGCGCGACUUGAUACCACUUCAUCAGCAUUAUAGCCUUUCAGAACUUAACCAGCCAGUGCAUGUGAAGGAGGUUUUUGCUCUAGCGAACAAAUUCGCCACUCAUCGUCUCAUCGGCGCACAAGCUCUGUCUUUAGAGGCUCCGAACACCCCCUGUGCAGAUUUUAGUGAUCGUAACGGGCGUCCCACCAGACGCGAACAGAACACCUUACCUGUUCUGACCAUUCUGUUAGUUAUCUACGAGAGACGGUCUUUCCACAGCUUCGUCAAUCGUAGGGAUCCACGACGGAAUUGUUCCUGCGGGGGACAGAUGAGGGAGCGCUUUAGGGACUUCCGAGUAUUUAUGUCUCGGGCCGUUUCGGUUCCUACGGAUGGGGGGAGUCUCGGGCGAAGGUCUUCAACUACCUCCGGCUCGAUCGCCCGUGGGGUGGAGACGUGUAAUGUUUCGGGUAAAAAAAGUUUUACCGGCAAUCAAACGGACGCAUUGUAUUUACGUCUUUACUCUAUGUACGUUGCGAACACACGUCUGCACGAGGGAAUUAAGGGACGGACAGGACUGUACGAAGGAUGGACGAGCACCUCCCCACAUGACGGCUCUAGAAGGAGCGUUUUCUCGGCUUGCGGGGAAGCCGAUGUCACACACGGGGUCCAGGCCAGCCGGUUACUCGAUAUGCCCAUUCCCUACCGCACUGCGGCACUGACUACCUUUACAGAUGCGGUUGGGGGCGCACGUCGCGAUUCCCCUUAUCGGUACACCGGGCCAGAGCGGAAGCGUUCCUUUAUUUCCAGUGAGUCUCGGCUCUGUUGCGGCGUCGGACGGUAUUCGAAGCGAAAUCAUGUCACUCCCUACAAGUCCACCGCUUGGCCACAGAGGAAAAGGAUUAGUUGUUGUUGGCGGGUGAACGGUGACAAACUUGUCGUCAAGCUUCCGCGUUCGAUGAGAACUUUCGAGCAGGUGGUCAAUAAGGACCCUAUCGGGAGCACGGGACGCGAUACGAUGACCCAUUGUGCACAUGCCUAUGGGGCAUGGUGGAAGUGUCUCUUAUACCCAUCUGGGAAGGCUAUUUGGAGAGUCCAGUGUCGGCGGUCGUUAAUCGUCGCACGUGCCGGUGAAAUAAGCAUAAGUAGGUUAGUUUCCGAGUGUAUAGUCCGAAGCCAUUAUACAUCCAUACCCGUGGUGCUGCAUUUGACAAAGGAAGUUAAAUACUUAUGCACCUACUUAGGCCAUAACUAUUGGAAUGGCGGAUCGGAUUUCACCCGUGCCCGAGUGGGUACACUCACGAUGAGGAUGAGUAUGUUGGUUAAGCUUCCGACCUGGUCCUCGGCUUACUUUUGGGCCCGGCUCAAAGAUUUUUUCACGCCAGCUCCUAUUACGGACUUUACGCCUAGGGCGUAUGAGCCCGGAUCAUGGUUCCUGCUCAAUAAGGCAGUUCGCAAUCAAACUCAUCGAGUUCUCCGACAGCGAACCGGCAGGCGUCUUACUUCCUGGAGGUACGAAUUUUGCGCACGUAAUAUCCCAUGCGCCUUCGUACGGCUAACUAGUGUGAUCAAUUAUGUGCCGGAAAUGCACCCGUCUAAACACGGCAGCGGGCCUCGUAGGUCACCCUCCUAUGGCUUCCCGGGUAGGGAAUCUGCCGACAACCCUCAGCGGGCGUUAACUAGCAUCCCUCAGCUCCGACAUGACGAUAGCCUAGGCCACACUUCUAAGAGCGAGUGCGAAAUUCCGCGAAACAGUCAGCUCGUUUUACAAUUGCAGUUUACGCACUUUCGACUGUUUGCUGUCAGACUGGAUGAAUCCGUUGGCGUUGUCUGCGACAGCCAAGCUCGAGGCUGCCUAUUUUCGACAAGGAGGCGGGUAGGUACCGGGAUCUCACCGGUAGUUAACCCCAAAGUGCUUGCAUUCCAUGUCCUACGAAGACCCGCAUGUUCCGCACGGAUACUUAACGUCGCAGAGAUGGGGUUUGACUAUUGCCCAGGCUACCCGCGGUCGGAGGCCCAAGGUAUACAAAUCUCUACUCCCGGUCUAGACACCUUUUCGGGGCUGAUUCUAGUGACCUGCGCAAUCGUAUGGGGCCGUUGUAUGAGUCCACCAGGGCAAGCGCACACACAGUUAAGUCCCGCUUAUUUGUGUGGUGCGAGGUGCGGCGAAUGGACGUCAAAUCUGAUCUUAGCUCCCUGCUGGACUCCGGCGUGCGUAGAGAGUCGUUUCCAGAAGGUACACCCUUGGAGUACCAUCCAGUCCUGCGAAUCCGGUGAUGACGGGUCUCUUCGACUUUUUGCCACGGGAGAACAGGUAACAGUGCUUAGCCGCGGACUCCUUCACUACAAUAAAAGAGCAUCAAUUAACCAUUGCAAGCUUGUUAGACUCCGUGGCCUGGGAAGUUUAUUACUCGGAAAGAGUAAAUUUCCACCGCAUACCACGUACACGCUAACCUUACGAAUGUUCGCCCCGAUACUACUCCUAACGGCCCAAUUCGGUGAAACCGCCGAUGUUAGUGCCGAAAUCCUACCAAACGCGCGGGUUUUAGUGAUUGCGCGAUAUAGGGCGGGUCGAAACUGGGGUACGUGCUGCCAUGGCACGGCAUAUGCAGACCCAGCCCUACUUGAAAGAACCAUGUACCAUAUCGGGAAGGUCAAUACUCGGUUGCUCGCAAUCUGCAAUGUAAUAUGGCCCUGGUGCUUCGUCUACUGGUCGGAACGGCCCAAAGUCCGAGUAACAUUUGGUAACUAUCAGCGGACAGGUUCAGGAGAUCCAGUGAUUCCAGUCGUUCUGACGAGAAAUCCAAUGCGAAAUAUCGCAGUCCAACUUCUAUGUUAUUUGGAUAGUUGUGUUCCAAUAAAUGGAAUUGACCGGUGGAGGGCAUCGGGGGAAUCAUGGUUUAUUUCGCGUCAUUCCAUCGUUCAGUCCCCUUACACGGCUCGUAAAGUCUAUCGUGAGCUCAUCCCUCCUCUACGCAGCCAUGAGAACAAUACCGCCUAUGUCUAG";
		
		StringBuilder accumulator = new StringBuilder(3);
		StringBuilder outputBuilder = new StringBuilder(input.length() / 3);
		for (int i = 0; i < input.length(); i++) {
			accumulator.append(input.charAt(i));
			if (accumulator.length() == 3) {
				String protein = PROTEIN_ENCODING_TABLE.get(accumulator.toString());
				if (protein != null) {
					if ("Stop".equalsIgnoreCase(protein)) {
						break;
					}
					outputBuilder.append(protein);
					accumulator.setLength(0);
				}
				else {
					throw new RuntimeException("No protein found in encoding table! (" + accumulator.toString() + ")");
				}
			}
		}
		System.out.println(outputBuilder.toString());
	}
}
